{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require(\"axios\");\n\naxios.defaults.baseURL = \"http://172.25.20.146:3000\";\n\nfunction createNewFloor(floorName) {\n  var resp;\n  return _regeneratorRuntime.async(function createNewFloor$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"Creating Floor\");\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(axios.post(\"/api/floor/create\", {\n            name: floorName,\n            tables: []\n          }));\n\n        case 4:\n          resp = _context.sent;\n\n          if (!(resp.status == 200)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            key: resp.data.generated_keys[0],\n            name: floorName,\n            tables: []\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(\"Could not complete request. View stacktrace for details.\");\n          console.error(_context.t0.response.data);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n}\n\nfunction getFloors() {\n  var resp;\n  return _regeneratorRuntime.async(function getFloors$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"getting all floors\");\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(axios.get(\"/api/floor\"));\n\n        case 4:\n          resp = _context2.sent;\n\n          if (!(resp.status == 200)) {\n            _context2.next = 8;\n            break;\n          }\n\n          console.log(\"got floors\");\n          return _context2.abrupt(\"return\", resp.data);\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(\"Could not get floors. View stacktrace for details\");\n          console.error(errror);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n}\n\nfunction getFloor(id) {\n  var resp;\n  return _regeneratorRuntime.async(function getFloor$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"getting a floor\");\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(axios.get(\"/api/floor/\" + id));\n\n        case 4:\n          resp = _context3.sent;\n\n          if (!(resp.status == 200)) {\n            _context3.next = 7;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", resp.data);\n\n        case 7:\n          console.error(\"Could not get Floor\");\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.log(\"Gould not get floor. View stacktrace for details\");\n          console.error(_context3.t0);\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n}\n\nmodule.exports = {\n  createNewFloor: createNewFloor,\n  getFloors: getFloors,\n  getFloor: getFloor\n};","map":{"version":3,"sources":["/Users/seniorproject/Documents/GitHub/que-ue-rn/Application/Components/Admin/ManageHouse/ManageFloor/FloorController.js"],"names":["axios","require","defaults","baseURL","createNewFloor","floorName","console","log","post","name","tables","resp","status","key","data","generated_keys","error","response","getFloors","get","errror","getFloor","id","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AACA,SAAeC,cAAf,CAA8BC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AADF;AAAA;AAAA,2CAGuBP,KAAK,CAACQ,IAAN,CAAW,mBAAX,EAAgC;AACjDC,YAAAA,IAAI,EAAEJ,SAD2C;AAEjDK,YAAAA,MAAM,EAAE;AAFyC,WAAhC,CAHvB;;AAAA;AAGUC,UAAAA,IAHV;;AAAA,gBAOQA,IAAI,CAACC,MAAL,IAAe,GAPvB;AAAA;AAAA;AAAA;;AAAA,2CAQa;AACLC,YAAAA,GAAG,EAAEF,IAAI,CAACG,IAAL,CAAUC,cAAV,CAAyB,CAAzB,CADA;AAELN,YAAAA,IAAI,EAAEJ,SAFD;AAGLK,YAAAA,MAAM,EAAE;AAHH,WARb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcIJ,UAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AAEAD,UAAAA,OAAO,CAACU,KAAR,CAAc,YAAMC,QAAN,CAAeH,IAA7B;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEZ,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AADF;AAAA;AAAA,2CAGuBP,KAAK,CAACmB,GAAN,CAAU,YAAV,CAHvB;;AAAA;AAGUR,UAAAA,IAHV;;AAAA,gBAIQA,IAAI,CAACC,MAAL,IAAe,GAJvB;AAAA;AAAA;AAAA;;AAKMN,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AALN,4CAMaI,IAAI,CAACG,IANlB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUIR,UAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACAD,UAAAA,OAAO,CAACU,KAAR,CAAcI,MAAd;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAeC,QAAf,CAAwBC,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACEhB,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AADF;AAAA;AAAA,2CAGuBP,KAAK,CAACmB,GAAN,iBAAwBG,EAAxB,CAHvB;;AAAA;AAGUX,UAAAA,IAHV;;AAAA,gBAIQA,IAAI,CAACC,MAAL,IAAe,GAJvB;AAAA;AAAA;AAAA;;AAAA,4CAImCD,IAAI,CAACG,IAJxC;;AAAA;AAMIR,UAAAA,OAAO,CAACU,KAAR,CAAc,qBAAd;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIV,UAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACAD,UAAAA,OAAO,CAACU,KAAR;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaAO,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,cAAc,EAAdA,cADe;AAEfc,EAAAA,SAAS,EAATA,SAFe;AAGfG,EAAAA,QAAQ,EAARA;AAHe,CAAjB","sourcesContent":["const axios = require(\"axios\");\naxios.defaults.baseURL = \"http://172.25.20.146:3000\";\nasync function createNewFloor(floorName) {\n  console.log(\"Creating Floor\");\n  try {\n    const resp = await axios.post(\"/api/floor/create\", {\n      name: floorName,\n      tables: [],\n    });\n    if (resp.status == 200)\n      return {\n        key: resp.data.generated_keys[0],\n        name: floorName,\n        tables: [],\n      };\n  } catch (error) {\n    console.log(\"Could not complete request. View stacktrace for details.\");\n\n    console.error(error.response.data);\n  }\n}\n\nasync function getFloors() {\n  console.log(\"getting all floors\");\n  try {\n    const resp = await axios.get(\"/api/floor\");\n    if (resp.status == 200) {\n      console.log(\"got floors\");\n      return resp.data;\n      //console.log(\"resp.data\", resp.data);\n    }\n  } catch (error) {\n    console.log(\"Could not get floors. View stacktrace for details\");\n    console.error(errror);\n  }\n}\n\nasync function getFloor(id) {\n  console.log(\"getting a floor\");\n  try {\n    const resp = await axios.get(`/api/floor/${id}`);\n    if (resp.status == 200) return resp.data;\n\n    console.error(\"Could not get Floor\");\n  } catch (error) {\n    console.log(\"Gould not get floor. View stacktrace for details\");\n    console.error(error);\n  }\n}\n\nmodule.exports = {\n  createNewFloor,\n  getFloors,\n  getFloor,\n};\n"]},"metadata":{},"sourceType":"script"}